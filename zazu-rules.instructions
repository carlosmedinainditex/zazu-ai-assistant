---
description: Instrucciones completas de IA para trabajar con Zazu (zazu-jira-api-connector), una herramienta de automatizaci√≥n y an√°lisis de API de JIRA. Define flujos de trabajo, gesti√≥n de contexto y patrones de integraci√≥n con herramientas MCP de Atlassian.
author: Carlos Medina
version: 1.0
tags: ["zazu", "jira", "api", "automatizacion", "analisis", "atlassian", "flujo-trabajo"]
globs: ["**/zazu-jira-api-connector/**/*", "**/*zazu*", "**/reports/**/*"]
---

# Reglas de Zazu - Conector de API JIRA

## üéØ Objetivo

Cuando el usuario mencione "Zazu", esto se refiere espec√≠ficamente al proyecto `zazu-jira-api-connector` - un conjunto completo de herramientas para interactuar con la API de Jira a trav√©s de scripts de automatizaci√≥n y flujos de trabajo de an√°lisis.

## üö® INSTRUCCIONES CR√çTICAS PARA MODELOS DE IA üö®

### Reconocimiento de Contexto
- **SIEMPRE** reconocer "Zazu" como referencia al proyecto `zazu-jira-api-connector`
- **AUTOM√ÅTICAMENTE** activar herramientas de Atlassian al trabajar con Zazu
- **ENTENDER** que Zazu es un puente entre consultas JIRA basadas en scripts y an√°lisis asistido por IA
- **PRIORIDAD**: Zazu se enfoca principalmente en **consultas de tickets**

### Activaci√≥n de Herramientas Requeridas
Al trabajar con Zazu, **DEBE** activar las siguientes categor√≠as de herramientas:
```
activate_atlassian_jira_search_tools
activate_atlassian_jira_issue_management
activate_atlassian_jira_project_management
```

### üéØ Protocolo de Consultas de Tickets
Cuando el usuario invoque Zazu, **DEBE**:
1. **IDENTIFICAR** la consulta de tickets que se quiere realizar
2. **EJECUTAR** usando `main.sh -q "consulta_JQL"`
3. **NUNCA** usar el formato de men√∫ interactivo
4. **PROCESAR** los resultados generados para an√°lisis posterior

## üìã Flujo de Trabajo Est√°ndar de Zazu

### Fase 1: Adquisici√≥n de Datos
1. **Ejecuci√≥n de Scripts**: Ejecutar `./main.sh -q "consulta_JQL"` para realizar consultas JIRA
2. **Generaci√≥n de Reportes**: Los scripts generan reportes en el directorio `/reports`
3. **Preparaci√≥n de Contexto**: Los reportes se convierten en la base para el an√°lisis de IA

### Fase 2: An√°lisis de IA
1. **Carga de Contexto**: Leer y entender los reportes generados
2. **Integraci√≥n MCP**: Usar herramientas MCP de Atlassian para consultas adicionales
3. **Interacci√≥n con Usuario**: Responder a peticiones del usuario bas√°ndose en el contexto combinado

## üèóÔ∏è Comprensi√≥n de la Arquitectura del Proyecto

### Componentes Principales
- **`diagnosis/`**: Pruebas de conexi√≥n y autenticaci√≥n
- **`handler/`**: Ejecuci√≥n de consultas JQL y recuperaci√≥n de issues
- **`menu/`**: Interfaz CLI interactiva
- **`reports/`**: Directorio de salida para reportes generados
- **`utils/`**: Utilidades comunes y funciones auxiliares

### Scripts Clave
- **`main.sh`**: **SCRIPT PRINCIPAL** - Punto de entrada para todas las consultas
- **`diagnostic.py`**: Prueba la conectividad y autenticaci√≥n de la API JIRA
- **`jql_query.py`**: Ejecuta consultas JQL con m√∫ltiples formatos de salida
- **`issue_query.py`**: Recupera informaci√≥n detallada de issues
- **`menu.py`**: Interfaz interactiva (NO USAR con Zazu)

## ‚ö° Ejecuci√≥n de Consultas de Tickets con Zazu

### üö® M√âTODO DE EJECUCI√ìN OBLIGATORIO
```bash
./main.sh -q "consulta_JQL_escapada"
```

### Formato de Consultas JQL
- **Escapado correcto**: Comillas dobles para la consulta completa
- **Ejemplos v√°lidos**:
  ```bash
  ./main.sh -q "project = PROJ AND status = 'In Progress'"
  ./main.sh -q "assignee = currentUser() AND priority = High"
  ./main.sh -q "created >= -7d AND labels = critical"
  ```

### ‚ùå PROHIBIDO
- **NO** usar `menu.py` o modo interactivo
- **NO** ejecutar scripts individuales directamente
- **SIEMPRE** usar `main.sh -q` como punto de entrada √∫nico

## üîß Trabajando con Reportes de Zazu

### Ubicaci√≥n de Reportes
- **Ruta Principal**: `/Users/carlos.medina/workspace/zazu-jira-api-connector/reports/`
- **Formatos Soportados**: JSON, Markdown (lista/tabla), texto plano

### Protocolo de An√°lisis de Reportes
1. **SIEMPRE** verificar reportes existentes antes de hacer nuevas llamadas MCP
2. **LEER** contenido de reportes para entender el contexto de datos actual
3. **COMPLEMENTAR** con consultas MCP solo cuando se necesiten datos adicionales
4. **CORRELACIONAR** resultados de scripts con datos MCP en vivo para precisi√≥n

## ‚ö†Ô∏è Reglas de Comportamiento Cr√≠ticas

### Cuando el Usuario Menciona Zazu
```python
# Modelo Mental de IA
if user_mentions("zazu"):
    context = "proyecto zazu-jira-api-connector"
    focus = "consultas de tickets"
    activate_tools(["atlassian_jira_*"])
    ask_for_jql_query()  # Primera acci√≥n: identificar consulta
    execution_method = "./main.sh -q 'consulta_escapada'"
    no_menu_mode = True  # NUNCA usar men√∫ interactivo
    check_reports_directory()
    prepare_for_jira_analysis()
```

### Comprensi√≥n del Flujo de Datos
1. **Script ‚Üí Reporte**: Los scripts de Zazu generan datos estructurados
2. **Reporte ‚Üí Contexto**: La IA lee y entiende el contenido del reporte
3. **Contexto + MCP ‚Üí An√°lisis**: Los datos combinados permiten respuestas completas
4. **An√°lisis ‚Üí Usuario**: Entregar insights basados en informaci√≥n completa

### Patrones de Respuesta
- **REFERENCIAR** datos del reporte cuando est√©n disponibles
- **COMPLEMENTAR** con consultas MCP para informaci√≥n en tiempo real
- **EXPLICAR** discrepancias entre reporte y datos en vivo
- **SUGERIR** re-ejecuci√≥n de scripts cuando los datos parezcan obsoletos

## üõ†Ô∏è Integraci√≥n con MCP de Atlassian

### Uso Complementario
- **Los Reportes proporcionan**: Instant√°neas hist√≥ricas, resultados de consultas masivas
- **MCP proporciona**: Datos en tiempo real, informaci√≥n detallada de issues, detalles de usuarios

### Estrategia de Consultas
1. **Comenzar con reportes**: Entender el contexto de datos existente
2. **Identificar brechas**: Determinar qu√© informaci√≥n adicional se necesita
3. **Llamadas MCP estrat√©gicas**: Hacer consultas dirigidas para llenar brechas de informaci√≥n
4. **Sintetizar resultados**: Combinar datos de reportes y MCP para imagen completa

## üìù Patrones de Comunicaci√≥n

### Procesamiento de Peticiones del Usuario
```
Usuario: "Zazu, mu√©strame los issues cr√≠ticos de la semana pasada"
Flujo de Respuesta de IA:
1. Verificar /reports para resultados de consultas JQL recientes
2. Si no hay reportes relevantes: 
   - Construir consulta JQL apropiada
   - Ejecutar: ./main.sh -q "priority = Critical AND created >= -7d"
3. Si existen reportes: analizar contenido
4. Usar MCP para obtener actualizaciones de estado en tiempo real si es necesario
5. Presentar an√°lisis completo
```

### Construcci√≥n de Consultas JQL
Al recibir una petici√≥n, **DEBE**:
1. **TRADUCIR** la petici√≥n del usuario a sintaxis JQL v√°lida
2. **ESCAPAR** correctamente la consulta para l√≠nea de comandos
3. **EJECUTAR** usando `./main.sh -q "consulta"`
4. **PROCESAR** los resultados del reporte generado

### Reporte de Estado
- **Antig√ºedad del Reporte**: Siempre mencionar cu√°ndo fueron generados los reportes
- **Frescura de Datos**: Indicar si los datos MCP difieren de los reportes
- **Sugerencias de Acci√≥n**: Recomendar re-ejecuci√≥n de scripts cuando sea apropiado

## üîç Casos de Uso Comunes de Zazu

### 1. An√°lisis de Issues
- **Script**: Extraer issues v√≠a JQL
- **Reporte**: Datos estructurados de issues
- **IA**: Analizar patrones, prioridades, tendencias
- **MCP**: Obtener estado actual, actualizaciones recientes

### 2. Verificaciones de Salud del Proyecto
- **Script**: Consultar m√©tricas del proyecto
- **Reporte**: Res√∫menes estad√≠sticos
- **IA**: Identificar riesgos, cuellos de botella
- **MCP**: Verificar estado actual del proyecto

### 3. An√°lisis de Sprints
- **Script**: Extraer datos de sprint
- **Reporte**: M√©tricas de sprint y listas de issues
- **IA**: An√°lisis de rendimiento
- **MCP**: Estado actual del sprint y bloqueadores

## üöÄ Mejores Pr√°cticas

### Eficiencia
- **LEER reportes primero** antes de hacer llamadas MCP
- **AGRUPAR consultas MCP** cuando se necesiten m√∫ltiples llamadas
- **CACHEAR insights** del an√°lisis de reportes

### Precisi√≥n
- **VERIFICAR** informaci√≥n cr√≠tica con MCP cuando sea necesario
- **VERIFICAR FECHAS** de datos de reportes para relevancia
- **CROSS-REFERENCIAR** diferentes fuentes de datos

### Experiencia de Usuario
- **PROACTIVO**: Sugerir scripts de Zazu relevantes
- **TRANSPARENTE**: Explicar fuentes de datos y frescura
- **ACCIONABLE**: Proporcionar pr√≥ximos pasos y recomendaciones

## üîÑ Mejora Continua

### Aprendizaje de Interacciones
- **IDENTIFICAR** patrones de consulta comunes
- **SUGERIR** optimizaciones de scripts
- **RECOMENDAR** mejoras en formato de reportes

### Optimizaci√≥n de Flujo de Trabajo
- **AGILIZAR** flujo de datos de scripts a an√°lisis
- **AUTOMATIZAR** patrones de an√°lisis rutinarios
- **MEJORAR** integraci√≥n entre herramientas Zazu y MCP

---

**Recuerda**: Zazu no es solo una herramienta - es un sistema completo de flujo de trabajo para an√°lisis de datos JIRA. Siempre piensa en t√©rminos del pipeline completo: Script ‚Üí Reporte ‚Üí An√°lisis ‚Üí Insights ‚Üí Acci√≥n.
