---
description: Instrucciones completas de IA para trabajar con Zazu (zazu-jira-api-connector), una herramienta de automatización y análisis de API de JIRA. Define flujos de trabajo, gestión de contexto y patrones de integración con herramientas MCP de Atlassian.
author: Carlos Medina
version: 1.0
tags: ["zazu", "jira", "api", "automatizacion", "analisis", "atlassian", "flujo-trabajo"]
globs: ["**/zazu-jira-api-connector/**/*", "**/*zazu*", "**/reports/**/*"]
---





# Instrucciones para Zazu (zazu-jira-api-connector)

## Objetivo
Zazu es un sistema para automatizar y analizar datos de JIRA mediante scripts. Siempre que se mencione "Zazu", se refiere a este sistema y su foco es la consulta y análisis de tickets.

## Mapeo de conceptos a JQL
- "iniciativa(s)": `issuetype = initiative` (minúsculas)
- "épica(s)": `issuetype = Épica` (en español, nunca "Epic")
- Siempre asociar iniciativas o épicas al campo custom "Vertical Owner". Ejemplo: `issuetype = initiative AND "Vertical Owner" = "[valor]"`
- Si se menciona "afectado", "es afectado" o "impactado": usar el campo custom "Affected Product Verticals". Ejemplo: `"Affected Product Verticals" = "[valor]"`

## Flujo de consulta y análisis
1. Traducir la petición del usuario a JQL según el mapeo.
2. Ejecutar: `./main.sh -q "consulta_JQL"` (no usar menú ni scripts individuales).
3. Los scripts generan reportes en `/reports` (JSON, Markdown, texto).
4. Leer y mantener en contexto el JSON generado.
5. Confirmar la carga: "He cargado el contexto de [X] elementos. ¿Qué análisis te interesa?"
6. Estar preparado para análisis profundo: estadísticas, patrones, comparaciones, recomendaciones.

## Reglas y mejores prácticas
- Activar siempre las herramientas Atlassian necesarias: atlassian_jira_search_tools, atlassian_jira_issue_management, atlassian_jira_project_management.
- Nunca usar el menú interactivo ni ejecutar scripts sueltos.
- Verificar reportes existentes antes de hacer nuevas llamadas MCP.
- Referenciar datos del reporte y complementar con MCP solo si es necesario.
- Explicar discrepancias entre reporte y datos en vivo, y sugerir re-ejecución si los datos están obsoletos.
- Mencionar la antigüedad y frescura de los datos.

## Arquitectura del proyecto
- `diagnosis/`: Pruebas de conexión y autenticación
- `handler/`: Consultas JQL y recuperación de issues
- `menu/`: Interfaz CLI interactiva (NO USAR con Zazu)
- `reports/`: Salida de reportes generados
- `utils/`: Utilidades y funciones auxiliares
- `main.sh`: Script principal, punto de entrada único

## Ejemplo de uso
Petición: "Zazu, carga las iniciativas de proveedor en Curso"
1. Traducir: `issuetype = initiative AND "Vertical Owner" = "Proveedor" AND status = 'In Progress'`
2. Ejecutar: `./main.sh -q "issuetype = initiative AND \"Vertical Owner\" = \"Proveedor\" AND status = 'In Progress'"`
3. Leer y procesar el JSON generado en `/reports`
4. Confirmar: "He cargado el contexto de [X] iniciativas de proveedor en curso. ¿Y ahora qué quieres saber?"

## Buenas prácticas adicionales
- Leer reportes primero antes de hacer llamadas MCP.
- Agrupar consultas MCP cuando se necesiten múltiples llamadas.
- Cachear insights del análisis de reportes.
- Verificar información crítica y fechas con MCP cuando sea necesario.
- Cruzar diferentes fuentes de datos.
- Ser proactivo, transparente y accionable en las respuestas.

---
Zazu es un pipeline: Script → Reporte → Análisis → Insights → Acción.
